package cn.kane.web.view.aggregator.script;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import com.alibaba.dubbo.rpc.RpcContext;
import com.alibaba.dubbo.rpc.service.GenericService;

import cn.kane.web.view.aggregator.service.inner.DataReadService;
import cn.kane.web.view.aggregator.util.groovy.annotation.DubboConsumer;

public class CommonDataReader implements DataReadService {

	@DubboConsumer(registerAddress="zookeeper://127.0.0.1:2181", 
			interfaceName = "cn.kane.web.view.viewresolver.support.velocity.service.VelocityExtConfigService",
			version = "1.0.0",
			timeout = 3000 ,
			generic=true)
	private GenericService genericService ;
	
	@Override
	public Object getData(Object param) {
		//synchronized
		//return genericService.$invoke("costexp", new String[]{"long"}, new Object[]{new Long(500)}) ;
		//async
		Future<Object> future = RpcContext.getContext().asyncCall(new Callable<Object>() {
            public Object call() throws Exception {
                return genericService.$invoke("costexp",  (String[])["java.lang.Long"],  (Object[])[new Long(150)]) ;
            }
        });
        return future ;
        //response
        /*
    	try {
			return future.get(200, TimeUnit.MILLISECONDS);
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (TimeoutException e) {
			e.printStackTrace();
		}
    	return null ;
    	*/
	}

}
