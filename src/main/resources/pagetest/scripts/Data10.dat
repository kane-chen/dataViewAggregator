package cn.kane.web.view.aggregator.script;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import com.alibaba.dubbo.rpc.RpcContext;
import com.alibaba.dubbo.rpc.service.GenericService;

import cn.kane.web.view.aggregator.service.inner.DataReadService;
import cn.kane.web.view.aggregator.util.groovy.annotation.DubboConsumer;

public class CommonDataReader implements DataReadService {

	@DubboConsumer(registerAddress="zookeeper://127.0.0.1:2181", 
			interfaceName = "cn.kane.web.view.viewresolver.support.velocity.service.RandomTimeotService",
			version = "1.0.0",
			timeout = 3000 ,
			generic=true)
	private GenericService genericService ;
	
	@Override
	public Object getData(Object param) {
		final Map<String, Object> key = new HashMap<String, Object>();
		key.put("base", new Long(10));
		key.put("range", new Integer(50));
		//async
		Future<Object> future = RpcContext.getContext().asyncCall(new Callable<Object>() {
            public Object call() throws Exception {
                return genericService.$invoke("cost",  (String[])["cn.kane.web.view.viewresolver.support.velocity.service.RandomMillis"],  (Object[])[key]) ;
            }
        });
        return future ;
	}

}
